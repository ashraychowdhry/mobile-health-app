{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport React, { useEffect } from 'react';\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport { TextInput } from 'react-native-gesture-handler';\nimport { auth } from \"../firebase\";\nimport { useNavigation } from '@react-navigation/native';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar AuthScreen = function AuthScreen() {\n  var _React$useState = React.useState(''),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      email = _React$useState2[0],\n      setEmail = _React$useState2[1];\n\n  var _React$useState3 = React.useState(''),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      password = _React$useState4[0],\n      setPassword = _React$useState4[1];\n\n  var nav = useNavigation();\n  useEffect(function () {\n    var unsubscribe = auth.onAuthStateChanged(function (user) {\n      if (user) {\n        nav.replace('Home');\n      } else {\n        console.log('user logged out');\n      }\n    });\n    return unsubscribe;\n  }, []);\n\n  var handleRegister = function handleRegister() {\n    auth.createUserWithEmailAndPassword(email, password).then(function () {\n      (function (userCred) {\n        console.log('SUCCESS - Registered user ' + userCred.user);\n      });\n    }).catch(function (error) {\n      alert(error);\n    });\n  };\n\n  var handleLogin = function handleLogin() {\n    auth.signInWithEmailAndPassword(email, password).then(function () {\n      (function (res) {\n        console.log('SUCCESS - Logged in user ' + userCred.user);\n      });\n    }).catch(function (error) {\n      alert(error);\n    });\n  };\n\n  return _jsxs(KeyboardAvoidingView, {\n    style: styles.container,\n    behavior: \"padding\",\n    children: [_jsxs(View, {\n      style: styles.inputsContainer,\n      children: [_jsx(TextInput, {\n        placeholder: \"Email\",\n        value: email,\n        onChangeText: function onChangeText(e) {\n          return setEmail(e);\n        },\n        style: styles.input\n      }), _jsx(TextInput, {\n        placeholder: \"Password\",\n        value: password,\n        onChangeText: function onChangeText(p) {\n          return setPassword(p);\n        },\n        style: styles.input,\n        secureTextEntry: true\n      })]\n    }), _jsxs(View, {\n      style: styles.buttonContainer,\n      children: [_jsx(TouchableOpacity, {\n        style: styles.button,\n        onPress: handleLogin,\n        children: _jsx(Text, {\n          style: styles.buttonText,\n          children: \"Login\"\n        })\n      }), _jsx(TouchableOpacity, {\n        style: [styles.button, styles.outlinedButton],\n        onPress: handleRegister,\n        children: _jsx(Text, {\n          style: styles.buttonOutlinedText,\n          children: \"Register\"\n        })\n      })]\n    })]\n  });\n};\n\nexport default AuthScreen;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  inputsContainer: {\n    width: '80%'\n  },\n  input: {\n    backgroundColor: 'white',\n    paddingHorizontal: 15,\n    paddingVertical: 10,\n    borderRadius: 10,\n    marginBottom: 10\n  },\n  buttonContainer: {\n    width: '60%',\n    marginTop: 40,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  button: {\n    backgroundColor: '#228CDB',\n    width: '100%',\n    padding: 15,\n    borderRadius: 10\n  },\n  buttonText: {\n    color: 'white',\n    fontSize: 18,\n    fontWeight: '700'\n  },\n  outlinedButton: {\n    backgroundColor: 'white',\n    borderColor: '#228CDB',\n    borderWidth: 1,\n    marginTop: 5\n  },\n  buttonOutlinedText: {\n    color: '#228CDB',\n    fontSize: 18,\n    fontWeight: '700'\n  }\n});","map":{"version":3,"sources":["/Users/ashraychowdhry/Documents/GitHub/mobile-health-app/screens/AuthScreen.js"],"names":["React","useEffect","TextInput","auth","useNavigation","AuthScreen","useState","email","setEmail","password","setPassword","nav","unsubscribe","onAuthStateChanged","user","replace","console","log","handleRegister","createUserWithEmailAndPassword","then","userCred","catch","error","alert","handleLogin","signInWithEmailAndPassword","res","styles","container","inputsContainer","e","input","p","buttonContainer","button","buttonText","outlinedButton","buttonOutlinedText","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","width","paddingHorizontal","paddingVertical","borderRadius","marginBottom","marginTop","padding","color","fontSize","fontWeight","borderColor","borderWidth"],"mappings":"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","sourcesContent":["import { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\nimport React, { useEffect } from 'react';\nimport { KeyboardAvoidingView } from 'react-native-web';\nimport { TextInput } from 'react-native-gesture-handler';\nimport { auth } from '../firebase';\nimport { useNavigation } from '@react-navigation/native';\n\nconst AuthScreen = () => {\n\n    const [email, setEmail] = React.useState('');\n    const [password, setPassword] = React.useState('');\n\n    const nav = useNavigation();\n\n    useEffect(() => {\n        const unsubscribe = auth.onAuthStateChanged(user => {\n            if (user) {\n                nav.replace('Home');\n            } else {\n                console.log('user logged out');\n            }\n        }); \n        return unsubscribe;\n    }, []);\n\n    const handleRegister = () => {\n        auth\n            .createUserWithEmailAndPassword(email, password)\n            .then(() => {userCred => {\n                console.log('SUCCESS - Registered user ' + userCred.user);\n            }})\n            .catch(error => {\n                alert(error);\n            })\n    }\n\n    const handleLogin = () => {\n        auth\n            .signInWithEmailAndPassword(email, password)\n            .then(() => {res => {\n                console.log('SUCCESS - Logged in user ' + userCred.user);\n            }})\n            .catch(error => {\n                alert(error);\n            })\n    }\n\n\n  return (\n    <KeyboardAvoidingView style={styles.container} behavior='padding'>\n      \n        <View style={styles.inputsContainer}>\n            <TextInput placeholder='Email' value={email} onChangeText={e => setEmail(e)} style={styles.input} />\n            <TextInput placeholder='Password' value={password} onChangeText={p => setPassword(p)} style={styles.input} secureTextEntry/>\n\n        </View>\n        <View style={styles.buttonContainer}>\n            <TouchableOpacity style={styles.button} onPress={handleLogin} >\n                <Text style={styles.buttonText}>Login</Text>\n            </TouchableOpacity>\n            <TouchableOpacity style={[styles.button, styles.outlinedButton]} onPress={handleRegister} >\n                <Text style={styles.buttonOutlinedText}>Register</Text>\n            </TouchableOpacity>\n        </View>\n    </KeyboardAvoidingView>\n  );\n};\n\nexport default AuthScreen;\n\nconst styles = StyleSheet.create({\n\n    container: {\n        flex: 1,\n        backgroundColor: '#fff',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    inputsContainer: {\n        width: '80%',\n    },\n    input: {\n        backgroundColor: 'white',\n        paddingHorizontal: 15,\n        paddingVertical: 10,\n        borderRadius: 10,\n        marginBottom: 10,\n    },\n    buttonContainer: {\n        width: '60%',\n        marginTop: 40,\n        alignItems: 'center',\n        justifyContent: 'center',\n\n\n    },\n    button: {\n        backgroundColor: '#228CDB',\n        width: '100%',\n        padding: 15,\n        borderRadius: 10,\n    },\n    buttonText: {\n        color: 'white',\n        fontSize: 18,\n        fontWeight: '700',\n\n    },\n    outlinedButton: {\n        backgroundColor: 'white',\n        borderColor: '#228CDB',\n        borderWidth: 1,\n        marginTop: 5,\n    },\n    buttonOutlinedText: {\n        color: '#228CDB',\n        fontSize: 18,\n        fontWeight: '700',\n    },\n    \n});\n"]},"metadata":{},"sourceType":"module"}